# 파일명: .github/workflows/java-cd-with-gradle.yml

name: Java CD with Gradle

on:
  push:
    branches: [ "baePoYong" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle Wrapper
        env:
          GPT_API_KEY: ${{ secrets.GPT_API_KEY }}
          GPT_API_URL: ${{ secrets.GPT_API_URL }}
          MAIL_ADDRESS: ${{ secrets.MAIL_ADDRESS }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_URL: ${{ secrets.MYSQL_URL }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
        run: ./gradlew build

      # --- Docker 관련 스텝을 "모범 사례(Best Practice)"로 교체 ---

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # [수정됨] 수동 'run' 스텝 대신 공식 'build-and-push' 액션 사용
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # Docker 빌드 컨텍스트의 경로 (보통 현재 디렉토리)
          context: .
          # Dockerfile 경로 (경로가 정확한지 다시 한번 확인해주세요)
          file: ./infra/docker/Dockerfile
          # 빌드 인자(args)를 여기에 전달
          build-args: |
            GPT_API_KEY=${{ secrets.GPT_API_KEY }}
            GPT_API_URL=${{ secrets.GPT_API_URL }}
            MAIL_ADDRESS=${{ secrets.MAIL_ADDRESS }}
            MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            MYSQL_URL=${{ secrets.MYSQL_URL }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
          # 빌드할 플랫폼
          platforms: linux/amd64,linux/arm64
          # 푸시할 저장소와 태그 (DOCKER_REPO Secret 사용)
          tags: ${{ secrets.DOCKER_REPO }}
          # 빌드 후 바로 푸시
          push: true
      
      # --- 서버 배포 스크립트 안정성 강화 ---

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.2.0
        id: deploy
        with:
          host: ${{ secrets.HOST }}
          username: tony
          port: 1203
          key: ${{ secrets.KEY }}
          envs: GITHUB_SHA
          script: |
            # 서버에서 Docker Hub 로그인
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

            # [수정됨] 컨테이너가 없어도 오류가 발생하지 않도록 || true 추가
            sudo docker stop easy_news_main || true
            sudo docker rm easy_news_main || true
            
            # [수정됨] 이미지가 없어도 오류가 발생하지 않도록 || true 추가
            sudo docker rmi ${{ secrets.DOCKER_REPO }} || true
            
            # 새로운 이미지 풀 및 실행
            sudo docker pull ${{ secrets.DOCKER_REPO }}
            sudo docker run -d --name easy_news_main -v /var/log/springboot:/var/log/springboot -p 1225:1225 ${{ secrets.DOCKER_REPO }}

            # [추가됨] 사용하지 않는 도커 리소스 정리 (디스크 공간 확보)
            sudo docker system prune -af